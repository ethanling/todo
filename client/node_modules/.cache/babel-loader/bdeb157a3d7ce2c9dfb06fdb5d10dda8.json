{"ast":null,"code":"import _slicedToArray from \"/Users/ethanling/Dev/ideations/todolist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ethanling/Dev/ideations/todolist/client/src/context/ThemeProvider.js\";\nimport React, { useState, useEffect } from 'react'; // This context will change the theme of the app based on the time of day for the user\n// For now, just changes the background gradient\n\nconst themes = {\n  dawn: {\n    backgroundImage: \"linear-gradient(179.4deg, rgba(255,145,113,1) -16.9%, rgba(130,156,255,1) 119.9%)\",\n    navGrad: \"linear-gradient( 179.4deg, rgba(130,156,255,1) -16.9%, rgba(255,145,113,1)119.9% )\"\n  },\n  day: {\n    backgroundImage: \"linear-gradient( 179.4deg,  rgba(111,214,255,1) -16.9%, rgba(75,68,255,1)119.9% )\",\n    navGrad: \"linear-gradient( 179.4deg,  rgba(75,68,255,1) -16.9%, rgba(111,214,255,1)119.9% )\"\n  },\n  dusk: {\n    backgroundImage: \"linear-gradient( 179.4deg,  rgba(12,20,69,1) -16.9%, rgba(71,30,84,1) 119.9% )\",\n    navGrad: \"linear-gradient( 179.4deg,  rgba(71,30,84,1) -16.9%, rgba(12,20,69,1)119.9% )\"\n  },\n  night: {\n    backgroundImage: \"linear-gradient( 179.4deg,  rgba(0,17,24,1) -16.9%, rgba(79,77,136,1)119.9% )\",\n    navGrad: \"linear-gradient( 179.4deg,  rgba(79,77,136,1) -16.9%, rgba(0,17,24,1)119.9% )\"\n  }\n};\nconst initialState = {\n  time: '',\n  theme: themes.day\n};\nexport const ThemeContext = React.createContext(initialState);\n\nconst ThemeProvider = ({\n  children\n}) => {\n  const _useState = useState('dusk'),\n        _useState2 = _slicedToArray(_useState, 2),\n        time = _useState2[0],\n        setTime = _useState2[1]; // useEffect(time => {\n  // Set theme based on time of day\n  // Dawn 6-9, day 9-17, Dusk 17-20, Night 20 - 6\n  //     const currentHour = new Date().getHours();\n  //     if (currentHour < 6 || currentHour > 20) {\n  //         setTime('night');\n  //     } else if (currentHour >= 6 && currentHour <= 9) {\n  //         setTime('dawn');\n  //     } else if (currentHour > 9 && currentHour <= 17) {\n  //         setTime('day');\n  //     } else if (currentHour > 17 && currentHour <= 20) {\n  //         setTime('dusk')\n  //     }\n  // }, [time])\n\n\n  const theme = time ? themes[time] : 'none';\n  return React.createElement(ThemeContext.Provider, {\n    value: {\n      theme\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, children);\n};\n\nexport default ThemeProvider;","map":{"version":3,"sources":["/Users/ethanling/Dev/ideations/todolist/client/src/context/ThemeProvider.js"],"names":["React","useState","useEffect","themes","dawn","backgroundImage","navGrad","day","dusk","night","initialState","time","theme","ThemeContext","createContext","ThemeProvider","children","setTime"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE;AACFC,IAAAA,eAAe,EACX,mFAFF;AAGFC,IAAAA,OAAO,EACH;AAJF,GADK;AAOXC,EAAAA,GAAG,EAAE;AACDF,IAAAA,eAAe,EACX,mFAFH;AAGDC,IAAAA,OAAO,EACH;AAJH,GAPM;AAaXE,EAAAA,IAAI,EAAE;AACFH,IAAAA,eAAe,EACX,gFAFF;AAGFC,IAAAA,OAAO,EACH;AAJF,GAbK;AAmBXG,EAAAA,KAAK,EAAE;AACHJ,IAAAA,eAAe,EACX,+EAFD;AAGHC,IAAAA,OAAO,EACH;AAJD;AAnBI,CAAf;AA2BA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,KAAK,EAAET,MAAM,CAACI;AAFG,CAArB;AAKA,OAAO,MAAMM,YAAY,GAAGb,KAAK,CAACc,aAAN,CAAoBJ,YAApB,CAArB;;AAEP,MAAMK,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA,oBACZf,QAAQ,CAAC,MAAD,CADI;AAAA;AAAA,QAC7BU,IAD6B;AAAA,QACvBM,OADuB,kBAGpC;AACI;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAML,KAAK,GAAGD,IAAI,GAAIR,MAAM,CAACQ,IAAD,CAAV,GAAqB,MAAvC;AAEA,SACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMI,QADN,CADJ;AAKH,CAzBD;;AA2BA,eAAeD,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// This context will change the theme of the app based on the time of day for the user\n// For now, just changes the background gradient\n\nconst themes = {\n    dawn: {\n        backgroundImage:\n            \"linear-gradient(179.4deg, rgba(255,145,113,1) -16.9%, rgba(130,156,255,1) 119.9%)\",\n        navGrad:\n            \"linear-gradient( 179.4deg, rgba(130,156,255,1) -16.9%, rgba(255,145,113,1)119.9% )\"\n    },\n    day: {\n        backgroundImage:\n            \"linear-gradient( 179.4deg,  rgba(111,214,255,1) -16.9%, rgba(75,68,255,1)119.9% )\",\n        navGrad:\n            \"linear-gradient( 179.4deg,  rgba(75,68,255,1) -16.9%, rgba(111,214,255,1)119.9% )\"\n    },\n    dusk: {\n        backgroundImage:\n            \"linear-gradient( 179.4deg,  rgba(12,20,69,1) -16.9%, rgba(71,30,84,1) 119.9% )\",\n        navGrad:\n            \"linear-gradient( 179.4deg,  rgba(71,30,84,1) -16.9%, rgba(12,20,69,1)119.9% )\"\n    },\n    night: {\n        backgroundImage:\n            \"linear-gradient( 179.4deg,  rgba(0,17,24,1) -16.9%, rgba(79,77,136,1)119.9% )\",\n        navGrad:\n            \"linear-gradient( 179.4deg,  rgba(79,77,136,1) -16.9%, rgba(0,17,24,1)119.9% )\"\n    }\n};\n\nconst initialState = {\n    time: '',\n    theme: themes.day,\n};\n\nexport const ThemeContext = React.createContext(initialState);\n\nconst ThemeProvider = ({ children }) => {\n    const [time, setTime] = useState('dusk');\n\n    // useEffect(time => {\n        // Set theme based on time of day\n        // Dawn 6-9, day 9-17, Dusk 17-20, Night 20 - 6\n    //     const currentHour = new Date().getHours();\n    //     if (currentHour < 6 || currentHour > 20) {\n    //         setTime('night');\n    //     } else if (currentHour >= 6 && currentHour <= 9) {\n    //         setTime('dawn');\n    //     } else if (currentHour > 9 && currentHour <= 17) {\n    //         setTime('day');\n    //     } else if (currentHour > 17 && currentHour <= 20) {\n    //         setTime('dusk')\n    //     }\n    // }, [time])\n\n    const theme = time ? (themes[time]) : ('none');\n\n    return (\n        <ThemeContext.Provider value={{ theme }}>\n            { children }\n        </ThemeContext.Provider>\n    )\n};\n\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}