{"ast":null,"code":"import _slicedToArray from\"/Users/ethanling/Dev/ideations/todolist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';// This context will change the theme of the app based on the time of day for the user\n// For now, just changes the background gradient\nvar themes={dawn:{backgroundImage:\"linear-gradient(179.4deg, rgba(255,145,113,1) -16.9%, rgba(130,156,255,1) 119.9%)\"},day:{backgroundImage:\"linear-gradient( 179.4deg,  rgba(111,214,255,1) -16.9%, rgba(75,68,255,1)119.9% )\"},dusk:{backgroundImage:\"linear-gradient( 179.4deg,  rgba(12,20,69,1) -16.9%, rgba(71,30,84,1) 119.9% )\"},night:{backgroundImage:\"linear-gradient( 179.4deg,  rgba(0,17,24,1) -16.9%, rgba(79,77,136,1)119.9% )\"}};var initialState={time:'',theme:themes.day};export var ThemeContext=React.createContext(initialState);var ThemeProvider=function ThemeProvider(_ref){var children=_ref.children;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),time=_useState2[0],setTime=_useState2[1];useEffect(function(time){// Set theme based on time of day\n// Dawn 6-9, day 9-17, Dusk 17-20, Night 20 - 6\nvar currentHour=new Date().getHours();if(currentHour<6||currentHour>20){setTime('night');}else if(currentHour>=6&&currentHour<=9){setTime('dawn');}else if(currentHour>9&&currentHour<=17){setTime('day');}else if(currentHour>17&&currentHour<=20){setTime('dusk');}},[time]);var theme=time?themes[time]:'none';return React.createElement(ThemeContext.Provider,{value:{theme:theme}},children);};export default ThemeProvider;","map":{"version":3,"sources":["/Users/ethanling/Dev/ideations/todolist/client/src/context/ThemeProvider.js"],"names":["React","useState","useEffect","themes","dawn","backgroundImage","day","dusk","night","initialState","time","theme","ThemeContext","createContext","ThemeProvider","children","setTime","currentHour","Date","getHours"],"mappings":"iIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA;AACA;AAEA,GAAMC,CAAAA,MAAM,CAAG,CACXC,IAAI,CAAE,CACFC,eAAe,CACX,mFAFF,CADK,CAKXC,GAAG,CAAE,CACDD,eAAe,CACX,mFAFH,CALM,CASXE,IAAI,CAAE,CACFF,eAAe,CACX,gFAFF,CATK,CAaXG,KAAK,CAAE,CACHH,eAAe,CACX,+EAFD,CAbI,CAAf,CAmBA,GAAMI,CAAAA,YAAY,CAAG,CACjBC,IAAI,CAAE,EADW,CAEjBC,KAAK,CAAER,MAAM,CAACG,GAFG,CAArB,CAKA,MAAO,IAAMM,CAAAA,YAAY,CAAGZ,KAAK,CAACa,aAAN,CAAoBJ,YAApB,CAArB,CAEP,GAAMK,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACZd,QAAQ,CAAC,EAAD,CADI,wCAC7BS,IAD6B,eACvBM,OADuB,eAGpCd,SAAS,CAAC,SAAAQ,IAAI,CAAI,CACd;AACA;AACA,GAAMO,CAAAA,WAAW,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,QAAX,EAApB,CACA,GAAIF,WAAW,CAAG,CAAd,EAAmBA,WAAW,CAAG,EAArC,CAAyC,CACrCD,OAAO,CAAC,OAAD,CAAP,CACH,CAFD,IAEO,IAAIC,WAAW,EAAI,CAAf,EAAoBA,WAAW,EAAI,CAAvC,CAA0C,CAC7CD,OAAO,CAAC,MAAD,CAAP,CACH,CAFM,IAEA,IAAIC,WAAW,CAAG,CAAd,EAAmBA,WAAW,EAAI,EAAtC,CAA0C,CAC7CD,OAAO,CAAC,KAAD,CAAP,CACH,CAFM,IAEA,IAAIC,WAAW,CAAG,EAAd,EAAoBA,WAAW,EAAI,EAAvC,CAA2C,CAC9CD,OAAO,CAAC,MAAD,CAAP,CACH,CACJ,CAbQ,CAaN,CAACN,IAAD,CAbM,CAAT,CAeA,GAAMC,CAAAA,KAAK,CAAGD,IAAI,CAAIP,MAAM,CAACO,IAAD,CAAV,CAAqB,MAAvC,CAEA,MACI,qBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEC,KAAK,CAALA,KAAF,CAA9B,EACMI,QADN,CADJ,CAKH,CAzBD,CA2BA,cAAeD,CAAAA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// This context will change the theme of the app based on the time of day for the user\n// For now, just changes the background gradient\n\nconst themes = {\n    dawn: {\n        backgroundImage:\n            \"linear-gradient(179.4deg, rgba(255,145,113,1) -16.9%, rgba(130,156,255,1) 119.9%)\"\n    },\n    day: {\n        backgroundImage:\n            \"linear-gradient( 179.4deg,  rgba(111,214,255,1) -16.9%, rgba(75,68,255,1)119.9% )\"\n    },\n    dusk: {\n        backgroundImage:\n            \"linear-gradient( 179.4deg,  rgba(12,20,69,1) -16.9%, rgba(71,30,84,1) 119.9% )\"\n    },\n    night: {\n        backgroundImage:\n            \"linear-gradient( 179.4deg,  rgba(0,17,24,1) -16.9%, rgba(79,77,136,1)119.9% )\"\n    }\n};\n\nconst initialState = {\n    time: '',\n    theme: themes.day,\n};\n\nexport const ThemeContext = React.createContext(initialState);\n\nconst ThemeProvider = ({ children }) => {\n    const [time, setTime] = useState('');\n\n    useEffect(time => {\n        // Set theme based on time of day\n        // Dawn 6-9, day 9-17, Dusk 17-20, Night 20 - 6\n        const currentHour = new Date().getHours();\n        if (currentHour < 6 || currentHour > 20) {\n            setTime('night');\n        } else if (currentHour >= 6 && currentHour <= 9) {\n            setTime('dawn');\n        } else if (currentHour > 9 && currentHour <= 17) {\n            setTime('day');\n        } else if (currentHour > 17 && currentHour <= 20) {\n            setTime('dusk')\n        }\n    }, [time])\n\n    const theme = time ? (themes[time]) : ('none');\n\n    return (\n        <ThemeContext.Provider value={{ theme }}>\n            { children }\n        </ThemeContext.Provider>\n    )\n};\n\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}