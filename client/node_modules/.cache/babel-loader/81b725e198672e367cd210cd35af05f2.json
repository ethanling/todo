{"ast":null,"code":"import _slicedToArray from \"/Users/ethanling/Dev/ideations/todolist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ethanling/Dev/ideations/todolist/client/src/context/TodoProvider.js\";\nimport React, { useState } from 'react';\nexport const TodoContext = React.createContext(); // const todoformat = {\n//     text: '',\n//     date: '',\n//     completed: false\n// }\n// const todoExample = {\n//     text: 'first todo',\n//     date: '11/12/13',\n//     completed: false\n// }\n\nconst TodoProvider = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        todo = _useState2[0],\n        setTodo = _useState2[1];\n\n  const _useState3 = useState({\n    todos: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        list = _useState4[0],\n        setList = _useState4[1];\n\n  const handleSetNewTodo = task => {\n    const newtodo = {\n      id: list.length + 1,\n      task: task,\n      date: \"\",\n      completed: false\n    };\n    setTodo(newTodo);\n    handleAddToList(item);\n  };\n\n  const handleAddToList = item => {\n    setList(prevState => ({\n      todos: [...prevState.todos, item]\n    }));\n  };\n\n  const handleCompleteTask = task => {\n    if (task.completed) {// const \n      // setList(prevState => ({\n      //     todos\n      // }))\n    }\n  };\n\n  return React.createElement(TodoContext.Provider, {\n    value: {\n      handleSetNewTodo,\n      handleAddToList,\n      todo,\n      list\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default TodoProvider;","map":{"version":3,"sources":["/Users/ethanling/Dev/ideations/todolist/client/src/context/TodoProvider.js"],"names":["React","useState","TodoContext","createContext","TodoProvider","props","todo","setTodo","todos","list","setList","handleSetNewTodo","task","newtodo","id","length","date","completed","newTodo","handleAddToList","item","prevState","handleCompleteTask","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,EAApB,C,CAEP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,oBACFJ,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,QACnBK,IADmB;AAAA,QACbC,OADa;;AAAA,qBAEFN,QAAQ,CAAC;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAAD,CAFN;AAAA;AAAA,QAEnBC,IAFmB;AAAA,QAEbC,OAFa;;AAI1B,QAAMC,gBAAgB,GAAGC,IAAI,IAAI;AAC7B,UAAMC,OAAO,GAAG;AACZC,MAAAA,EAAE,EAAEL,IAAI,CAACM,MAAL,GAAc,CADN;AAEZH,MAAAA,IAAI,EAAEA,IAFM;AAGZI,MAAAA,IAAI,EAAE,EAHM;AAIZC,MAAAA,SAAS,EAAE;AAJC,KAAhB;AAOAV,IAAAA,OAAO,CAACW,OAAD,CAAP;AACAC,IAAAA,eAAe,CAACC,IAAD,CAAf;AACH,GAVD;;AAYA,QAAMD,eAAe,GAAGC,IAAI,IAAI;AAC5BV,IAAAA,OAAO,CAAEW,SAAD,KAAgB;AACpBb,MAAAA,KAAK,EAAE,CAAC,GAAGa,SAAS,CAACb,KAAd,EAAqBY,IAArB;AADa,KAAhB,CAAD,CAAP;AAGH,GAJD;;AAMA,QAAME,kBAAkB,GAAGV,IAAI,IAAI;AAC/B,QAAIA,IAAI,CAACK,SAAT,EAAoB,CAChB;AACA;AACA;AACA;AACH;AACJ,GAPD;;AASA,SACI,oBAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHN,MAAAA,gBADG;AAEHQ,MAAAA,eAFG;AAGHb,MAAAA,IAHG;AAIHG,MAAAA;AAJG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQMJ,KAAK,CAACkB,QARZ,CADJ;AAaH,CA5CD;;AA8CA,eAAenB,YAAf","sourcesContent":["import React, { useState } from 'react';\n\nexport const TodoContext = React.createContext();\n\n// const todoformat = {\n//     text: '',\n//     date: '',\n//     completed: false\n// }\n\n// const todoExample = {\n//     text: 'first todo',\n//     date: '11/12/13',\n//     completed: false\n// }\n\nconst TodoProvider = props => {\n    const [todo, setTodo] = useState('');\n    const [list, setList] = useState({ todos: [] });\n\n    const handleSetNewTodo = task => {\n        const newtodo = { \n            id: list.length + 1,\n            task: task,\n            date: \"\",\n            completed: false\n        };\n\n        setTodo(newTodo);\n        handleAddToList(item)\n    }\n\n    const handleAddToList = item => {\n        setList((prevState) => ({\n            todos: [...prevState.todos, item]\n        }))\n    }\n\n    const handleCompleteTask = task => {\n        if (task.completed) {\n            // const \n            // setList(prevState => ({\n            //     todos\n            // }))\n        }\n    }\n\n    return (\n        <TodoContext.Provider \n            value={{\n                handleSetNewTodo,\n                handleAddToList,\n                todo,\n                list\n            }}\n        >\n            { props.children }\n        </TodoContext.Provider>\n    )\n\n}\n\nexport default TodoProvider;"]},"metadata":{},"sourceType":"module"}