{"ast":null,"code":"import _toConsumableArray from\"/Users/ethanling/Dev/ideations/todolist/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/ethanling/Dev/ideations/todolist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';export var TodoContext=React.createContext();var TodoProvider=function TodoProvider(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),todo=_useState2[0],setTodo=_useState2[1];var _useState3=useState({todos:[]}),_useState4=_slicedToArray(_useState3,2),list=_useState4[0],setList=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),completedNum=_useState6[0],setCompletedNum=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),finished=_useState8[0],setFinished=_useState8[1];var handleSetNewTodo=function handleSetNewTodo(task,date){// Creats task format\n// Todo: add date functionality\nvar taskId=list.todos.length+1;var newTodo={id:taskId,task:task,date:\"\",completed:false};setTodo(newTodo);// Adds task object to state array\nhandleAddToList(newTodo);};var handleAddToList=function handleAddToList(item){// Adds new task to state array\nsetList(function(prevState){return{todos:[].concat(_toConsumableArray(prevState.todos),[item])};});};var handleCompleteTask=function handleCompleteTask(id){// Create temporary array to store state\nvar tempState=list.todos;// Find correct todo, and mark as completed, or unmark if already completed\nfor(var i=0;i<tempState.length;i++){if(tempState[i].id===id){if(tempState[i].completed){// CompletedNum used for calculating percentage of completed tasks\ntempState[i].completed=false;setCompletedNum(parseInt(completedNum-1));}else{// Remove from completed\ntempState[i].completed=true;setCompletedNum(parseInt(completedNum+1));}}}// Update state\nsetList({todos:tempState});};var handleDeleteTask=function handleDeleteTask(id){// Finds task to be deleted and removes it from state array\nvar newState=list.todos.filter(function(task){return id!==task.id;});setList({todos:newState});if(completedNum){setCompletedNum(completedNum-1);}};var handleSetFinished=function handleSetFinished(percent){if(percent===100){setFinished(true);}else{setFinished(false);}};return React.createElement(TodoContext.Provider,{value:{handleSetNewTodo:handleSetNewTodo,handleAddToList:handleAddToList,handleCompleteTask:handleCompleteTask,handleDeleteTask:handleDeleteTask,handleSetFinished:handleSetFinished,todo:todo,list:list,completedNum:completedNum,finished:finished}},props.children);};export default TodoProvider;","map":{"version":3,"sources":["/Users/ethanling/Dev/ideations/todolist/client/src/context/TodoProvider.js"],"names":["React","useState","TodoContext","createContext","TodoProvider","props","todo","setTodo","todos","list","setList","completedNum","setCompletedNum","finished","setFinished","handleSetNewTodo","task","date","taskId","length","newTodo","id","completed","handleAddToList","item","prevState","handleCompleteTask","tempState","i","parseInt","handleDeleteTask","newState","filter","handleSetFinished","percent","children"],"mappings":"0QAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAGF,KAAK,CAACG,aAAN,EAApB,CAEP,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,eACFJ,QAAQ,CAAC,EAAD,CADN,wCACnBK,IADmB,eACbC,OADa,8BAEFN,QAAQ,CAAC,CAAEO,KAAK,CAAE,EAAT,CAAD,CAFN,yCAEnBC,IAFmB,eAEbC,OAFa,8BAGcT,QAAQ,CAAC,CAAD,CAHtB,yCAGnBU,YAHmB,eAGLC,eAHK,8BAIMX,QAAQ,CAAC,KAAD,CAJd,yCAInBY,QAJmB,eAITC,WAJS,eAM1B,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAOC,IAAP,CAAgB,CACrC;AACA;AACA,GAAMC,CAAAA,MAAM,CAAGT,IAAI,CAACD,KAAL,CAAWW,MAAX,CAAoB,CAAnC,CACA,GAAMC,CAAAA,OAAO,CAAG,CACZC,EAAE,CAAEH,MADQ,CAEZF,IAAI,CAAEA,IAFM,CAGZC,IAAI,CAAE,EAHM,CAIZK,SAAS,CAAE,KAJC,CAAhB,CAOAf,OAAO,CAACa,OAAD,CAAP,CACA;AACAG,eAAe,CAACH,OAAD,CAAf,CACH,CAdD,CAgBA,GAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,IAAI,CAAI,CAC5B;AACAd,OAAO,CAAC,SAACe,SAAD,QAAgB,CACpBjB,KAAK,8BAAMiB,SAAS,CAACjB,KAAhB,GAAuBgB,IAAvB,EADe,CAAhB,EAAD,CAAP,CAGH,CALD,CAOA,GAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACL,EAAD,CAAQ,CAC/B;AACA,GAAMM,CAAAA,SAAS,CAAGlB,IAAI,CAACD,KAAvB,CACA;AACA,IAAK,GAAIoB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,SAAS,CAACR,MAA9B,CAAsCS,CAAC,EAAvC,CAA2C,CACvC,GAAID,SAAS,CAACC,CAAD,CAAT,CAAaP,EAAb,GAAoBA,EAAxB,CAA4B,CACxB,GAAIM,SAAS,CAACC,CAAD,CAAT,CAAaN,SAAjB,CAA4B,CACxB;AACAK,SAAS,CAACC,CAAD,CAAT,CAAaN,SAAb,CAAyB,KAAzB,CACAV,eAAe,CAACiB,QAAQ,CAAClB,YAAY,CAAG,CAAhB,CAAT,CAAf,CACH,CAJD,IAIO,CACH;AACAgB,SAAS,CAACC,CAAD,CAAT,CAAaN,SAAb,CAAyB,IAAzB,CACAV,eAAe,CAACiB,QAAQ,CAAClB,YAAY,CAAG,CAAhB,CAAT,CAAf,CACH,CACJ,CACJ,CACD;AACAD,OAAO,CAAC,CAAEF,KAAK,CAAEmB,SAAT,CAAD,CAAP,CACH,CAnBD,CAqBA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAT,EAAE,CAAI,CAC3B;AACA,GAAMU,CAAAA,QAAQ,CAAGtB,IAAI,CAACD,KAAL,CAAWwB,MAAX,CAAkB,SAAAhB,IAAI,QAAIK,CAAAA,EAAE,GAAKL,IAAI,CAACK,EAAhB,EAAtB,CAAjB,CACAX,OAAO,CAAC,CAACF,KAAK,CAAEuB,QAAR,CAAD,CAAP,CACA,GAAIpB,YAAJ,CAAkB,CACdC,eAAe,CAACD,YAAY,CAAG,CAAhB,CAAf,CACH,CACJ,CAPD,CASA,GAAMsB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,OAAO,CAAI,CACjC,GAAIA,OAAO,GAAK,GAAhB,CAAqB,CACjBpB,WAAW,CAAC,IAAD,CAAX,CACH,CAFD,IAEO,CACHA,WAAW,CAAC,KAAD,CAAX,CACH,CACJ,CAND,CAQA,MACI,qBAAC,WAAD,CAAa,QAAb,EACI,KAAK,CAAE,CACHC,gBAAgB,CAAhBA,gBADG,CAEHQ,eAAe,CAAfA,eAFG,CAGHG,kBAAkB,CAAlBA,kBAHG,CAIHI,gBAAgB,CAAhBA,gBAJG,CAKHG,iBAAiB,CAAjBA,iBALG,CAMH3B,IAAI,CAAJA,IANG,CAOHG,IAAI,CAAJA,IAPG,CAQHE,YAAY,CAAZA,YARG,CASHE,QAAQ,CAARA,QATG,CADX,EAaMR,KAAK,CAAC8B,QAbZ,CADJ,CAkBH,CArFD,CAuFA,cAAe/B,CAAAA,YAAf","sourcesContent":["import React, { useState } from 'react';\n\nexport const TodoContext = React.createContext();\n\nconst TodoProvider = props => {\n    const [todo, setTodo] = useState('');\n    const [list, setList] = useState({ todos: [] });\n    const [completedNum, setCompletedNum] = useState(0);\n    const [finished, setFinished] = useState(false);\n\n    const handleSetNewTodo = (task, date) => {\n        // Creats task format\n        // Todo: add date functionality\n        const taskId = list.todos.length + 1;\n        const newTodo = { \n            id: taskId,\n            task: task,\n            date: \"\",\n            completed: false\n        };\n\n        setTodo(newTodo);\n        // Adds task object to state array\n        handleAddToList(newTodo)\n    }\n\n    const handleAddToList = item => {\n        // Adds new task to state array\n        setList((prevState) => ({\n            todos: [...prevState.todos, item]\n        }))\n    }\n\n    const handleCompleteTask = (id) => {\n        // Create temporary array to store state\n        const tempState = list.todos;\n        // Find correct todo, and mark as completed, or unmark if already completed\n        for (let i = 0; i < tempState.length; i++) {\n            if (tempState[i].id === id) {\n                if (tempState[i].completed) {\n                    // CompletedNum used for calculating percentage of completed tasks\n                    tempState[i].completed = false;\n                    setCompletedNum(parseInt(completedNum - 1))\n                } else {\n                    // Remove from completed\n                    tempState[i].completed = true;\n                    setCompletedNum(parseInt(completedNum + 1));\n                }\n            }\n        }\n        // Update state\n        setList({ todos: tempState});\n    }\n\n    const handleDeleteTask = id => {\n        // Finds task to be deleted and removes it from state array\n        const newState = list.todos.filter(task => id !== task.id);\n        setList({todos: newState});\n        if (completedNum) {\n            setCompletedNum(completedNum - 1);\n        }\n    }\n\n    const handleSetFinished = percent => {\n        if (percent === 100) {\n            setFinished(true);\n        } else {\n            setFinished(false);\n        }\n    }\n\n    return (\n        <TodoContext.Provider \n            value={{\n                handleSetNewTodo,\n                handleAddToList,\n                handleCompleteTask,\n                handleDeleteTask,\n                handleSetFinished,\n                todo,\n                list,\n                completedNum,\n                finished\n            }}\n        >\n            { props.children }\n        </TodoContext.Provider>\n    )\n\n}\n\nexport default TodoProvider;"]},"metadata":{},"sourceType":"module"}