{"ast":null,"code":"import _slicedToArray from \"/Users/ethanling/Dev/ideations/todolist/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ethanling/Dev/ideations/todolist/client/src/context/TodoProvider.js\";\nimport React, { useState } from 'react';\nexport const TodoContext = React.createContext();\n\nconst TodoProvider = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        todo = _useState2[0],\n        setTodo = _useState2[1];\n\n  const _useState3 = useState({\n    todos: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        list = _useState4[0],\n        setList = _useState4[1];\n\n  const _useState5 = useState({\n    completed: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        completed = _useState6[0],\n        setCompleted = _useState6[1];\n\n  const handleSetNewTodo = (task, date) => {\n    // Creats task format\n    // Todo: add date functionality\n    const taskId = list.todos.length + 1;\n    const newTodo = {\n      id: taskId,\n      task: task,\n      date: \"\",\n      completed: false\n    };\n    setTodo(newTodo); // Adds task object to state array\n\n    handleAddToList(newTodo);\n  };\n\n  const handleAddToList = item => {\n    // Adds new task to state array\n    setList(prevState => ({\n      todos: [...prevState.todos, item]\n    }));\n  };\n\n  const handleCompleteTask = id => {\n    // Create temporary array to store state\n    const tempState = list.todos; // Find correct todo, and mark as completed, or unmark if already completed\n\n    for (let i = 0; i < tempState.length; i++) {\n      if (tempState[i].id === id) {\n        if (tempState[i].completed) {\n          tempState[i].completed = false;\n        } else {\n          tempState[i].completed = true;\n        }\n      }\n    } // Update state\n\n\n    setList({\n      todos: tempState\n    });\n  };\n\n  const handleDeleteTask = id => {\n    // Finds task to be deleted and removes it from state array\n    const newState = list.todos.filter(task => id !== task.id);\n    setList(prevState => ({\n      todos: [...prevState, newState]\n    }));\n  };\n\n  return React.createElement(TodoContext.Provider, {\n    value: {\n      handleSetNewTodo,\n      handleAddToList,\n      handleCompleteTask,\n      handleDeleteTask,\n      todo,\n      list\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default TodoProvider;","map":{"version":3,"sources":["/Users/ethanling/Dev/ideations/todolist/client/src/context/TodoProvider.js"],"names":["React","useState","TodoContext","createContext","TodoProvider","props","todo","setTodo","todos","list","setList","completed","setCompleted","handleSetNewTodo","task","date","taskId","length","newTodo","id","handleAddToList","item","prevState","handleCompleteTask","tempState","i","handleDeleteTask","newState","filter","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,EAApB;;AAEP,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,oBACFJ,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,QACnBK,IADmB;AAAA,QACbC,OADa;;AAAA,qBAEFN,QAAQ,CAAC;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAAD,CAFN;AAAA;AAAA,QAEnBC,IAFmB;AAAA,QAEbC,OAFa;;AAAA,qBAGQT,QAAQ,CAAC;AAACU,IAAAA,SAAS,EAAE;AAAZ,GAAD,CAHhB;AAAA;AAAA,QAGnBA,SAHmB;AAAA,QAGRC,YAHQ;;AAK1B,QAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrC;AACA;AACA,UAAMC,MAAM,GAAGP,IAAI,CAACD,KAAL,CAAWS,MAAX,GAAoB,CAAnC;AACA,UAAMC,OAAO,GAAG;AACZC,MAAAA,EAAE,EAAEH,MADQ;AAEZF,MAAAA,IAAI,EAAEA,IAFM;AAGZC,MAAAA,IAAI,EAAE,EAHM;AAIZJ,MAAAA,SAAS,EAAE;AAJC,KAAhB;AAOAJ,IAAAA,OAAO,CAACW,OAAD,CAAP,CAXqC,CAYrC;;AACAE,IAAAA,eAAe,CAACF,OAAD,CAAf;AACH,GAdD;;AAgBA,QAAME,eAAe,GAAGC,IAAI,IAAI;AAC5B;AACAX,IAAAA,OAAO,CAAEY,SAAD,KAAgB;AACpBd,MAAAA,KAAK,EAAE,CAAC,GAAGc,SAAS,CAACd,KAAd,EAAqBa,IAArB;AADa,KAAhB,CAAD,CAAP;AAGH,GALD;;AAOA,QAAME,kBAAkB,GAAIJ,EAAD,IAAQ;AAC/B;AACA,UAAMK,SAAS,GAAGf,IAAI,CAACD,KAAvB,CAF+B,CAG/B;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACP,MAA9B,EAAsCQ,CAAC,EAAvC,EAA2C;AACvC,UAAID,SAAS,CAACC,CAAD,CAAT,CAAaN,EAAb,KAAoBA,EAAxB,EAA4B;AACxB,YAAIK,SAAS,CAACC,CAAD,CAAT,CAAad,SAAjB,EAA4B;AACxBa,UAAAA,SAAS,CAACC,CAAD,CAAT,CAAad,SAAb,GAAyB,KAAzB;AACH,SAFD,MAEO;AACHa,UAAAA,SAAS,CAACC,CAAD,CAAT,CAAad,SAAb,GAAyB,IAAzB;AACH;AACJ;AACJ,KAZ8B,CAa/B;;;AACAD,IAAAA,OAAO,CAAC;AAAEF,MAAAA,KAAK,EAAEgB;AAAT,KAAD,CAAP;AACH,GAfD;;AAiBA,QAAME,gBAAgB,GAAGP,EAAE,IAAI;AAC3B;AACA,UAAMQ,QAAQ,GAAGlB,IAAI,CAACD,KAAL,CAAWoB,MAAX,CAAkBd,IAAI,IAAIK,EAAE,KAAKL,IAAI,CAACK,EAAtC,CAAjB;AACAT,IAAAA,OAAO,CAAEY,SAAD,KAAgB;AACpBd,MAAAA,KAAK,EAAE,CAAC,GAAGc,SAAJ,EAAeK,QAAf;AADa,KAAhB,CAAD,CAAP;AAGH,GAND;;AAQA,SACI,oBAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHd,MAAAA,gBADG;AAEHO,MAAAA,eAFG;AAGHG,MAAAA,kBAHG;AAIHG,MAAAA,gBAJG;AAKHpB,MAAAA,IALG;AAMHG,MAAAA;AANG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUMJ,KAAK,CAACwB,QAVZ,CADJ;AAeH,CApED;;AAsEA,eAAezB,YAAf","sourcesContent":["import React, { useState } from 'react';\n\nexport const TodoContext = React.createContext();\n\nconst TodoProvider = props => {\n    const [todo, setTodo] = useState('');\n    const [list, setList] = useState({ todos: [] });\n    const [completed, setCompleted] = useState({completed: []});\n\n    const handleSetNewTodo = (task, date) => {\n        // Creats task format\n        // Todo: add date functionality\n        const taskId = list.todos.length + 1;\n        const newTodo = { \n            id: taskId,\n            task: task,\n            date: \"\",\n            completed: false\n        };\n\n        setTodo(newTodo);\n        // Adds task object to state array\n        handleAddToList(newTodo)\n    }\n\n    const handleAddToList = item => {\n        // Adds new task to state array\n        setList((prevState) => ({\n            todos: [...prevState.todos, item]\n        }))\n    }\n\n    const handleCompleteTask = (id) => {\n        // Create temporary array to store state\n        const tempState = list.todos;\n        // Find correct todo, and mark as completed, or unmark if already completed\n        for (let i = 0; i < tempState.length; i++) {\n            if (tempState[i].id === id) {\n                if (tempState[i].completed) {\n                    tempState[i].completed = false;\n                } else {\n                    tempState[i].completed = true;\n                }\n            }\n        }\n        // Update state\n        setList({ todos: tempState});\n    }\n\n    const handleDeleteTask = id => {\n        // Finds task to be deleted and removes it from state array\n        const newState = list.todos.filter(task => id !== task.id);\n        setList((prevState) => ({\n            todos: [...prevState, newState]\n        }));\n    }\n\n    return (\n        <TodoContext.Provider \n            value={{\n                handleSetNewTodo,\n                handleAddToList,\n                handleCompleteTask,\n                handleDeleteTask,\n                todo,\n                list\n            }}\n        >\n            { props.children }\n        </TodoContext.Provider>\n    )\n\n}\n\nexport default TodoProvider;"]},"metadata":{},"sourceType":"module"}