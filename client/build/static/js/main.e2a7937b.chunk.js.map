{"version":3,"sources":["icons/delete.svg","context/TodoProvider.js","components/ProgressCircle.js","components/layout/Nav.js","components/AddTodo.js","components/CompleteButton.js","components/DeleteButton.js","components/ListItem.js","components/List.js","components/layout/Content.js","components/layout/Footer.js","components/pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoContext","React","createContext","TodoProvider","props","useState","todo","setTodo","todos","list","setList","completedNum","setCompletedNum","finished","setFinished","handleAddToList","item","prevState","Provider","value","handleSetNewTodo","task","date","newTodo","id","length","completed","handleCompleteTask","tempState","i","parseInt","handleDeleteTask","newState","filter","handleSetFinished","percent","children","ProgressCircle","setPercent","useContext","useEffect","updatedPercentage","Math","round","sqSize","strokeWidth","radius","viewBox","dashArray","PI","dashOffset","width","height","className","style","opacity","cx","cy","r","transform","strokeDasharray","strokeDashoffset","x","y","dy","textAnchor","Nav","AddTodo","input","setInput","handleSubmit","e","preventDefault","taskDate","Date","toString","trim","onSubmit","autoComplete","onChange","target","htmlFor","type","onClick","CompleteButton","action","name","DeleteButton","src","TrashIcon","alt","ListItem","List","map","key","Content","Footer","href","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2a7937b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.667d82e4.svg\";","import React, { useState } from 'react';\n\nexport const TodoContext = React.createContext();\n\nconst TodoProvider = props => {\n    const [todo, setTodo] = useState('');\n    const [list, setList] = useState({ todos: [] });\n    const [completedNum, setCompletedNum] = useState(0);\n    const [finished, setFinished] = useState(false);\n\n    const handleSetNewTodo = (task, date) => {\n        // Creats task format\n        // Todo: add date functionality\n        const taskId = list.todos.length + 1;\n        const newTodo = { \n            id: taskId,\n            task: task,\n            date: \"\",\n            completed: false\n        };\n\n        setTodo(newTodo);\n        // Adds task object to state array\n        handleAddToList(newTodo)\n    }\n\n    const handleAddToList = item => {\n        // Adds new task to state array\n        setList((prevState) => ({\n            todos: [...prevState.todos, item]\n        }))\n    }\n\n    const handleCompleteTask = (id) => {\n        // Create temporary array to store state\n        const tempState = list.todos;\n        // Find correct todo, and mark as completed, or unmark if already completed\n        for (let i = 0; i < tempState.length; i++) {\n            if (tempState[i].id === id) {\n                if (tempState[i].completed) {\n                    // CompletedNum used for calculating percentage of completed tasks\n                    tempState[i].completed = false;\n                    setCompletedNum(parseInt(completedNum - 1))\n                } else {\n                    // Remove from completed\n                    tempState[i].completed = true;\n                    setCompletedNum(parseInt(completedNum + 1));\n                }\n            }\n        }\n        // Update state\n        setList({ todos: tempState});\n    }\n\n    const handleDeleteTask = id => {\n        // Finds task to be deleted and removes it from state array\n        const newState = list.todos.filter(task => id !== task.id);\n        setList({todos: newState});\n        if (completedNum) {\n            setCompletedNum(completedNum - 1);\n        }\n    }\n\n    const handleSetFinished = percent => {\n        if (percent === 100) {\n            setFinished(true);\n        } else {\n            setFinished(false);\n        }\n    }\n\n    return (\n        <TodoContext.Provider \n            value={{\n                handleSetNewTodo,\n                handleAddToList,\n                handleCompleteTask,\n                handleDeleteTask,\n                handleSetFinished,\n                todo,\n                list,\n                completedNum,\n                finished\n            }}\n        >\n            { props.children }\n        </TodoContext.Provider>\n    )\n\n}\n\nexport default TodoProvider;","import React, { useState, useContext, useEffect } from 'react';\n// Global State\nimport { TodoContext } from '../context/TodoProvider';\n\nconst ProgressCircle = props => {\n    const [percent, setPercent] = useState(0);\n    const { list, completedNum, handleSetFinished } = useContext(TodoContext);\n\n    useEffect(() => {\n        if (completedNum) {\n            const updatedPercentage = Math.round(\n                (completedNum / list.todos.length) * 100\n            );\n            setPercent(updatedPercentage);\n        } else {\n            setPercent(0);\n        }\n        // Send percentage to global state\n        handleSetFinished(percent);\n    }, [percent, setPercent, list, completedNum, handleSetFinished])\n\n    const sqSize = props.sqSize;\n    const strokeWidth = props.strokeWidth;\n    const radius = (sqSize / strokeWidth) * 2;\n    const viewBox = `0 0 ${sqSize} ${sqSize}`;\n    const dashArray = radius * Math.PI * 2;\n    const dashOffset = dashArray - dashArray * percent / 100; \n\n    return (\n        <svg\n            width={sqSize}\n            height={sqSize}\n            viewBox={viewBox}\n            className=\"percentage-circle\"\n            style={(list.todos.length === 0) ? ({ opacity: 0 }) : ({ opacity: 1 })}\n        >\n            <circle\n                className=\"circle-background\"\n                cx={sqSize / 2}\n                cy={sqSize / 2}\n                r={radius}\n                strokeWidth={`${strokeWidth}px`}\n            />\n            <circle\n                className=\"circle-progress\"\n                cx={sqSize / 2}\n                cy={sqSize / 2}\n                r={radius}\n                strokeWidth={`${strokeWidth}px`}\n                // Start progress marker at 12 O'Clock\n                transform={`rotate(-90 ${sqSize / 2} ${sqSize / 2})`}\n                style={{\n                    strokeDasharray: dashArray,\n                    strokeDashoffset: dashOffset\n                }}\n            />\n            <text\n                className=\"circle-text\"\n                x=\"50%\"\n                y=\"50%\"\n                dy=\".3em\"\n                textAnchor=\"middle\"\n            >\n                { percent + \"%\" }\n            </text>\n        </svg>\n    );\n}\n\nexport default ProgressCircle;","import React, { useContext } from \"react\";\n// State\nimport { TodoContext } from '../../context/TodoProvider';\n// Components\nimport ProgressCircle from '../ProgressCircle';\n\nconst Nav = () => {\n    const { finished } = useContext(TodoContext);\n    return (\n        <nav>\n            <div className=\"nav-container\">\n                <div className=\"logo-container\">\n                    <span className={`${finished ? \"logo\" : \"logo logo-hide\"}`}>\n                        Nice work.\n                    </span>\n                    <span className={`${finished ? \"logo logo-hide\" : \"logo\"}`}>\n                        Do.\n                    </span>\n                </div>\n                <ProgressCircle sqSize={100} strokeWidth={7} />\n            </div>\n        </nav>\n    );\n};\n\nexport default Nav;\n","import React, { useState, useContext } from 'react';\n// State\nimport { TodoContext } from '../context/TodoProvider';\n\nconst AddTodo = props => {\n    const [input, setInput] = useState('');\n    const { handleSetNewTodo } = useContext(TodoContext);\n\n    const handleInputChange = e => {\n        setInput(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const taskDate = new Date();\n\n        if (input && input !== '' && input !== ' ') {\n            handleSetNewTodo(input.toString().trim(), taskDate);\n            setInput('');\n        }\n    }\n\n    return (\n        <form className=\"add-task\" onSubmit={ handleSubmit } autoComplete=\"off\">\n            <input id=\"task\" value={input} onChange={ handleInputChange } />\n            <label htmlFor=\"task\">Add a new task...</label>\n            <button type=\"button\" className=\"add-task-button\" onClick={ handleSubmit }>+</button>\n        </form>\n    )\n}\n\nexport default AddTodo; ","import React from 'react';\n\nconst CompleteButton = ({ action, value }) => {\n    return (\n        <form className=\"completed-checkbox\">\n            <input\n                id={`checkbox-${value}`}\n                name=\"\"\n                value={value}\n                type=\"checkbox\"\n                onClick={action}\n            />\n            <label htmlFor={`checkbox-${value}`}></label>\n        </form>\n    );\n}\n\nexport default CompleteButton;","import React from \"react\";\n// Icon\nimport TrashIcon from \"../icons/delete.svg\";\n\nconst DeleteButton = ({ action }) => {\n    return (\n        <button className=\"delete-button\" type=\"button\" onClick={action}>\n            <img src={TrashIcon} className=\"delete-button-icon\" alt=\"Delete task\" />\n        </button>\n    );\n};\n\nexport default DeleteButton;\n","import React, { useContext } from 'react';\n// State\nimport { TodoContext } from \"../context/TodoProvider\";\n// Components\nimport CompleteButton from \"./CompleteButton\";\nimport DeleteButton from \"./DeleteButton\";\n\nconst ListItem = ({task}) => {\nconst { handleCompleteTask, handleDeleteTask } = useContext(TodoContext);\n    return (\n        <li>\n            <CompleteButton value={task.id} action={() => handleCompleteTask(task.id)} />\n            <span className={`task-text ${task.completed ? 'completed-task' : ''}`}>{task.task}</span>\n            <span className=\"task-date\">{task.date}</span>\n            <DeleteButton action={() => handleDeleteTask(task.id)} />\n        </li> \n    )\n}\n\nexport default ListItem;","import React, { useContext } from 'react';\n// State\nimport { TodoContext } from \"../context/TodoProvider\";\n// Comnponents\nimport AddTodo from \"./AddTodo\";\nimport ListItem from \"./ListItem\";\n\nconst List = () => {\n    const { list } = useContext(TodoContext);\n    \n    return (\n        <div className=\"list\">\n            <AddTodo />                \n            <ul>\n            {list.todos.map((item, i) => {\n                return <ListItem key={i} task={item} />\n            })}\n            </ul>\n        </div>\n    );\n}\n\nexport default List;","import React from 'react';\n\n// Components\nimport List from '../List';\n\nconst Content = () => {\n    return (\n        <div className=\"content\">\n            <List />\n        </div>\n    )\n}\n\nexport default Content;","import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>\n                Made by <a href=\"https://ethanling.com/\">Ethan Ling</a> in 2019.\n            </p>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\n// Components\nimport Nav from '../layout/Nav';\nimport Content from '../layout/Content';\nimport Footer from '../layout/Footer';\n\nconst Main = () => {\n    return (\n        <div className=\"App\">\n            <Nav />\n            <Content />\n            <Footer />\n        </div>\n    )\n}\n\nexport default Main;","import React from \"react\";\n\n// State\nimport TodoProvider from './context/TodoProvider';\n\n// Pages\nimport Main from './components/pages/Main';\n\nfunction App() {\n    return (\n        <TodoProvider>\n            <Main />\n        </TodoProvider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}